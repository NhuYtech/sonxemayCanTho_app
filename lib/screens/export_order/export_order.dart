// lib/screens/manager/export_order.dart
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';
import 'package:sonxemaycantho/models/service_order.dart'; // ƒê·∫£m b·∫£o ƒë√£ import ServiceOrder model

class ExportOrder extends StatefulWidget {
  const ExportOrder({super.key});

  @override
  State<ExportOrder> createState() => _ExportOrderState();
}

class _ExportOrderState extends State<ExportOrder> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  final TextEditingController _customerStoreNameController =
      TextEditingController();
  final TextEditingController _quantityController = TextEditingController();
  final TextEditingController _noteController = TextEditingController();
  final TextEditingController _serviceOrderIdController =
      TextEditingController();
  final TextEditingController _createdByController = TextEditingController();

  DateTime? _selectedExportDate;
  bool _isAddingOrder = false;
  List<DocumentSnapshot> _serviceOrders = [];

  @override
  void initState() {
    super.initState();
    _loadServiceOrders();
  }

  @override
  void dispose() {
    _customerStoreNameController.dispose();
    _quantityController.dispose();
    _noteController.dispose();
    _serviceOrderIdController.dispose();
    _createdByController.dispose();
    super.dispose();
  }

  /// T·∫£i c√°c ƒë∆°n h√†ng nh·∫≠p c√≥ tr·∫°ng th√°i "ƒê√£ s∆°n xong" t·ª´ Firestore.
  Future<void> _loadServiceOrders() async {
    try {
      QuerySnapshot snapshot = await _firestore
          .collection('serviceOrders')
          .where('status', isEqualTo: 'ƒê√£ s∆°n xong')
          .get();
      setState(() {
        _serviceOrders = snapshot.docs;
      });
      print('üìã ƒê√£ load ${_serviceOrders.length} ƒë∆°n nh·∫≠p ƒë√£ ho√†n th√†nh.');
    } catch (e) {
      print('‚ùå L·ªói khi t·∫£i ƒë∆°n nh·∫≠p: $e');
    }
  }

  /// T·ª± ƒë·ªông t√≠nh t·ªïng s·ªë l∆∞·ª£ng xe t·ª´ t·∫•t c·∫£ ServiceOrderItem c·ªßa m·ªôt ServiceOrder.
  Future<void> _calculateAndFillQuantity(String serviceOrderId) async {
    try {
      QuerySnapshot itemSnapshot = await _firestore
          .collection('serviceOrderItems')
          .where('serviceOrderId', isEqualTo: serviceOrderId)
          .get();

      int totalQuantity = 0;
      for (var doc in itemSnapshot.docs) {
        totalQuantity +=
            (doc.data() as Map<String, dynamic>)['quantity'] as int;
      }
      setState(() {
        _quantityController.text = totalQuantity.toString();
      });
    } catch (e) {
      print('‚ùå L·ªói khi t√≠nh t·ªïng s·ªë l∆∞·ª£ng: $e');
      setState(() {
        _quantityController.text = '0'; // ƒê·∫∑t v·ªÅ 0 n·∫øu c√≥ l·ªói
      });
    }
  }

  /// Hi·ªÉn th·ªã h·ªôp tho·∫°i ƒë·ªÉ ch·ªçn ƒë∆°n nh·∫≠p.
  void _showServiceOrderDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Ch·ªçn ƒë∆°n ƒë√£ ho√†n th√†nh'),
          content: SizedBox(
            width: double.maxFinite,
            height: 300,
            child: _serviceOrders.isEmpty
                ? const Center(child: Text('Kh√¥ng c√≥ ƒë∆°n nh·∫≠p ƒë√£ ho√†n th√†nh'))
                : ListView.builder(
                    itemCount: _serviceOrders.length,
                    itemBuilder: (context, index) {
                      var order = _serviceOrders[index];
                      var data = order.data() as Map<String, dynamic>;

                      ServiceOrder selectedOrder = ServiceOrder.fromMap(
                        data,
                        order.id,
                      );

                      return ListTile(
                        title: Text('ID: ${order.id}'),
                        subtitle: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text('C·ª≠a h√†ng: ${data['storeName'] ?? 'N/A'}'),
                            Text(
                              'Ng√†y nh·∫≠p: ${DateFormat('dd/MM/yyyy').format((data['createDate'] as Timestamp).toDate())}',
                            ),
                            Text('Tr·∫°ng th√°i: ${data['status'] ?? 'N/A'}'),
                          ],
                        ),
                        onTap: () {
                          // T·ª± ƒë·ªông ƒëi·ªÅn th√¥ng tin v√†o form
                          _serviceOrderIdController.text = order.id;
                          _customerStoreNameController.text =
                              selectedOrder.storeName;
                          _noteController.text = selectedOrder.note ?? '';

                          // G·ªçi ph∆∞∆°ng th·ª©c ƒë·ªÉ t√≠nh t·ªïng s·ªë l∆∞·ª£ng
                          _calculateAndFillQuantity(order.id);

                          Navigator.pop(context);
                        },
                      );
                    },
                  ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('ƒê√≥ng'),
            ),
          ],
        );
      },
    );
  }

  /// Hi·ªÉn th·ªã form ƒë·ªÉ th√™m ƒë∆°n xu·∫•t.
  void _showAddExportOrderForm() {
    _clearForm();

    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) {
        // Use StatefulBuilder to manage the state of the modal bottom sheet
        return StatefulBuilder(
          builder: (BuildContext context, StateSetter modalSetState) {
            return Padding(
              padding: EdgeInsets.only(
                bottom: MediaQuery.of(context).viewInsets.bottom,
                left: 16,
                right: 16,
                top: 20,
              ),
              child: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    const Text(
                      'Th√™m ƒê∆°n Xu·∫•t M·ªõi',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _serviceOrderIdController,
                      readOnly: true,
                      decoration: InputDecoration(
                        labelText: 'M√£ ƒë∆°n nh·∫≠p',
                        border: const OutlineInputBorder(),
                        suffixIcon: IconButton(
                          icon: const Icon(Icons.search),
                          onPressed: _showServiceOrderDialog,
                        ),
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Vui l√≤ng ch·ªçn m·ªôt ƒë∆°n nh·∫≠p';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _customerStoreNameController,
                      decoration: const InputDecoration(
                        labelText: 'T√™n c·ª≠a h√†ng',
                        border: OutlineInputBorder(),
                      ),
                      enabled: false, // T√™n c·ª≠a h√†ng t·ª± ƒë·ªông ƒëi·ªÅn
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _quantityController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'S·ªë l∆∞·ª£ng xe',
                        border: OutlineInputBorder(),
                      ),
                      enabled: false, // S·ªë l∆∞·ª£ng t·ª± ƒë·ªông ƒëi·ªÅn
                    ),
                    const SizedBox(height: 16),
                    ListTile(
                      title: Text(
                        _selectedExportDate == null
                            ? 'Ch·ªçn ng√†y xu·∫•t'
                            : 'Ng√†y xu·∫•t: ${DateFormat('dd/MM/yyyy').format(_selectedExportDate!)}',
                      ),
                      trailing: const Icon(Icons.calendar_today),
                      onTap: () async {
                        DateTime? pickedDate = await showDatePicker(
                          context: context,
                          initialDate: _selectedExportDate ?? DateTime.now(),
                          firstDate: DateTime(2000),
                          lastDate: DateTime(2101),
                        );
                        if (pickedDate != null) {
                          modalSetState(() {
                            // Update the state of the modal
                            _selectedExportDate = pickedDate;
                          });
                        }
                      },
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _noteController,
                      maxLines: 3,
                      decoration: const InputDecoration(
                        labelText: 'Ghi ch√∫',
                        border: OutlineInputBorder(),
                      ),
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _createdByController,
                      decoration: const InputDecoration(
                        labelText: 'Ng∆∞·ªùi t·∫°o',
                        border: OutlineInputBorder(),
                      ),
                    ),
                    const SizedBox(height: 20),
                    ElevatedButton(
                      onPressed: _isAddingOrder ? null : _addExportOrder,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFFC1473B),
                        foregroundColor: Colors.white,
                      ),
                      child: const Text('Th√™m ƒê∆°n Xu·∫•t'),
                    ),
                    const SizedBox(height: 20),
                  ],
                ),
              ),
            );
          },
        );
      },
    ).whenComplete(() {
      setState(() {
        _isAddingOrder = false;
      });
    });
  }

  /// Th√™m ƒë∆°n xu·∫•t v√†o Firestore v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n nh·∫≠p g·ªëc.
  Future<void> _addExportOrder() async {
    if (_selectedExportDate == null ||
        _serviceOrderIdController.text.isEmpty ||
        _createdByController.text.isEmpty) {
      _showSnackBar('Vui l√≤ng ƒëi·ªÅn ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!', Colors.red);
      return;
    }

    setState(() {
      _isAddingOrder = true;
    });

    try {
      // Ki·ªÉm tra xem serviceOrderId c√≥ t·ªìn t·∫°i kh√¥ng
      final serviceOrderRef = _firestore
          .collection('serviceOrders')
          .doc(_serviceOrderIdController.text);
      final serviceOrderDoc = await serviceOrderRef.get();
      if (!serviceOrderDoc.exists) {
        throw Exception('M√£ ƒë∆°n nh·∫≠p kh√¥ng t·ªìn t·∫°i.');
      }

      final quantity = int.tryParse(_quantityController.text);
      if (quantity == null || quantity <= 0) {
        throw Exception('S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá.');
      }

      // T·∫°o ƒë∆°n xu·∫•t m·ªõi
      DocumentReference docRef = await _firestore
          .collection('exportOrders')
          .add({
            'customerStoreName': _customerStoreNameController.text.trim(),
            'exportDate': Timestamp.fromDate(_selectedExportDate!),
            'note': _noteController.text.trim().isEmpty
                ? ''
                : _noteController.text.trim(),
            'quantity': quantity,
            'serviceOrderId': _serviceOrderIdController.text.trim(),
            'createdBy': _createdByController.text.trim(),
            'createdAt': FieldValue.serverTimestamp(),
          });

      // C·∫¨P NH·∫¨T: Tr·∫°ng th√°i c·ªßa ƒë∆°n nh·∫≠p g·ªëc th√†nh "ƒê√£ g·ª≠i"
      await _firestore
          .collection('serviceOrders')
          .doc(_serviceOrderIdController.text.trim())
          .update({'status': 'ƒê√£ g·ª≠i'});

      print('‚úÖ ƒê√£ t·∫°o ƒë∆°n xu·∫•t: ${docRef.id} v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n nh·∫≠p.');
      _clearForm();
      _showSnackBar('‚úÖ ƒê∆°n xu·∫•t ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!', Colors.green);
      Navigator.pop(context); // ƒê√≥ng modal bottom sheet
    } catch (e) {
      print('‚ùå L·ªói khi th√™m ƒë∆°n xu·∫•t: $e');
      _showSnackBar('‚ùå L·ªói khi th√™m ƒë∆°n xu·∫•t: $e', Colors.red);
    } finally {
      setState(() {
        _isAddingOrder = false;
      });
    }
  }

  /// X√≥a d·ªØ li·ªáu trong c√°c tr∆∞·ªùng c·ªßa form.
  void _clearForm() {
    _customerStoreNameController.clear();
    _quantityController.clear();
    _noteController.clear();
    _serviceOrderIdController.clear();
    _createdByController.clear();
    _selectedExportDate = null;
  }

  /// Hi·ªÉn th·ªã th√¥ng b√°o ng·∫Øn.
  void _showSnackBar(String message, Color color) {
    ScaffoldMessenger.of(
      context,
    ).showSnackBar(SnackBar(content: Text(message), backgroundColor: color));
  }

  /// Hi·ªÉn th·ªã chi ti·∫øt c·ªßa m·ªôt ƒë∆°n xu·∫•t trong m·ªôt h·ªôp tho·∫°i.
  void _showExportOrderDetail(DocumentSnapshot exportOrder) {
    final data = exportOrder.data() as Map<String, dynamic>;
    final exportDate = (data['exportDate'] as Timestamp).toDate();

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Chi ti·∫øt ƒë∆°n xu·∫•t'),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisSize: MainAxisSize.min,
              children: [
                _buildDetailRow('M√£ ƒë∆°n xu·∫•t', exportOrder.id),
                _buildDetailRow(
                  'Ng√†y xu·∫•t',
                  DateFormat('dd/MM/yyyy').format(exportDate),
                ),
                _buildDetailRow('C·ª≠a h√†ng', data['customerStoreName'] ?? 'N/A'),
                _buildDetailRow('S·ªë l∆∞·ª£ng', data['quantity'].toString()),
                _buildDetailRow('ƒê∆°n d·ªãch v·ª•', data['serviceOrderId'] ?? 'N/A'),
                _buildDetailRow('Ng∆∞·ªùi t·∫°o', data['createdBy'] ?? 'N/A'),
                _buildDetailRow('Ghi ch√∫', data['note'] ?? 'Kh√¥ng c√≥'),
                _buildDetailRow(
                  'Ng√†y t·∫°o',
                  DateFormat(
                    'dd/MM/yyyy HH:mm:ss',
                  ).format((data['createdAt'] as Timestamp).toDate()),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('ƒê√≥ng'),
            ),
          ],
        );
      },
    );
  }

  // A helper method to build a detail row with a label and value.
  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: RichText(
        text: TextSpan(
          style: const TextStyle(fontSize: 16, color: Colors.black87),
          children: [
            TextSpan(
              text: '$label: ',
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            TextSpan(text: value),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Danh s√°ch ƒë∆°n xu·∫•t',
          style: TextStyle(color: Colors.white),
        ),
        backgroundColor: const Color(0xFFC1473B),
        iconTheme: const IconThemeData(color: Colors.white),
      ),
      body: StreamBuilder<QuerySnapshot>(
        stream: _firestore
            .collection('exportOrders')
            .orderBy('createdAt', descending: true)
            .snapshots(),
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            return Center(child: Text('ƒê√£ x·∫£y ra l·ªói: ${snapshot.error}'));
          }

          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }

          final documents = snapshot.data!.docs;

          if (documents.isEmpty) {
            return const Center(child: Text('Ch∆∞a c√≥ ƒë∆°n xu·∫•t n√†o.'));
          }

          return ListView.builder(
            itemCount: documents.length,
            itemBuilder: (context, index) {
              final doc = documents[index];
              final data = doc.data() as Map<String, dynamic>;
              final exportDate = (data['exportDate'] as Timestamp).toDate();
              return Card(
                margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                elevation: 4,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // C·∫¨P NH·∫¨T: Hi·ªÉn th·ªã m√£ ƒë∆°n xu·∫•t
                      Text(
                        'M√£ ƒë∆°n xu·∫•t: ${doc.id}',
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                          color: Color(0xFFC1473B),
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Ng√†y xu·∫•t: ${DateFormat('dd/MM/yyyy').format(exportDate)}',
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 15,
                          color: Color.fromARGB(255, 10, 10, 10),
                        ),
                      ),
                      const SizedBox(height: 8),
                      Row(
                        children: [
                          const Icon(Icons.store, size: 16, color: Colors.grey),
                          const SizedBox(width: 4),
                          Text(
                            'C·ª≠a h√†ng: ${data['customerStoreName'] ?? 'N/A'}',
                            style: const TextStyle(fontSize: 15),
                          ),
                        ],
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          const Icon(
                            Icons.note_alt,
                            size: 16,
                            color: Colors.grey,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            'Ghi ch√∫: ${data['note'] ?? 'Kh√¥ng c√≥'}',
                            style: const TextStyle(fontSize: 15),
                          ),
                        ],
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          const Icon(
                            Icons.format_list_numbered,
                            size: 16,
                            color: Colors.grey,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            'S·ªë l∆∞·ª£ng: ${data['quantity'] ?? 'N/A'}',
                            style: const TextStyle(fontSize: 15),
                          ),
                        ],
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          const Icon(Icons.link, size: 16, color: Colors.grey),
                          const SizedBox(width: 4),
                          Expanded(
                            child: Text(
                              'M√£ ƒë∆°n nh·∫≠p: ${data['serviceOrderId'] ?? 'N/A'}',
                              style: const TextStyle(
                                color: Color.fromARGB(255, 0, 0, 0),
                                decoration: TextDecoration.none,
                                fontSize: 15,
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          const Icon(
                            Icons.person,
                            size: 16,
                            color: Colors.grey,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            'Ng∆∞·ªùi t·∫°o: ${data['createdBy'] ?? 'N/A'}',
                            style: const TextStyle(fontSize: 15),
                          ),
                        ],
                      ),
                      const SizedBox(height: 12),
                      Align(
                        alignment: Alignment.bottomRight,
                        child: TextButton(
                          onPressed: () => _showExportOrderDetail(doc),
                          child: const Text(
                            'Xem chi ti·∫øt',
                            style: TextStyle(
                              color: Color.fromARGB(255, 71, 200, 216),
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _showAddExportOrderForm,
        backgroundColor: const Color(0xFFC1473B),
        foregroundColor: Colors.white,
        child: const Icon(Icons.add),
      ),
    );
  }
}
